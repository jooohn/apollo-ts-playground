import { ApolloServer, gql, makeExecutableSchema } from 'apollo-server-express';
import ApolloClient from 'apollo-boost';
import fs from 'fs';
import express from 'express';
import { GetEntry } from 'graphql/types-client';
import fetch, { RequestInit } from 'node-fetch';

import { ContentType, Entry, EntryResolvers, QueryResolvers } from 'graphql/types-server';
import ContentTypeResolver = EntryResolvers.ContentTypeResolver;
import Resolvers = QueryResolvers.Resolvers;

const typeDefs = gql`${fs.readFileSync('./graphql/schema.graphql', 'UTF-8')}`;

type Context = {}

const queryResolvers: Resolvers<Context> = {

  entry: (_, { id }, context, info) => ({

    id,

    contentType: null,

  }),

};

const contentTypeResolver: ContentTypeResolver<ContentType, Entry> = (parent, args, context, info) => ({
  id: parent.id,
});

// Type definitions of graphql-tools doesn't do nice work. Use type info generated by
// graphql-code-generator, and suppress type info here.
const resolvers: any = {
  Query: queryResolvers,
  Entry: {
    contentType: contentTypeResolver,
  }
};

makeExecutableSchema({ typeDefs, resolvers });

const app = express();
const server = new ApolloServer({ typeDefs, resolvers });
server.applyMiddleware({ app });

const port = 4000;

app.listen({ port }, async () => {
  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`);

  const f: any = fetch;
  const client = new ApolloClient({
    uri: `http://localhost:${port}/graphql`,
    fetch: f,
  });

  const ret = await client.query<GetEntry.Entry, GetEntry.Variables>({
    query: gql(fs.readFileSync('./graphql/query.graphql', 'UTF-8')),
    variables: { entryId: '3' },
  });
  console.log(ret.data);
});

